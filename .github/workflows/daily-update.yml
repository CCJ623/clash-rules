# 工作流的名称，显示在 GitHub Actions 页面
name: 每日数据更新 (Python)

# 定义工作流的触发器
on:
  # 每天定时运行，例如在 UTC 时间凌晨 0 点 30 分
  # 你可以根据需要调整 cron 表达式
  # cron 表达式格式: 分 时 日 月 周
  # 示例: '30 0 * * *' 表示每天 UTC 00:30
  schedule:
    - cron: '30 0 * * *' # 每天 UTC 00:30 运行

  # 允许手动从 GitHub Actions 页面触发此工作流
  workflow_dispatch:

# 定义一个或多个作业
jobs:
  # 唯一的作业 ID
  update-data:
    # 显式授予对 `contents` 的写入权限，这是 Git 推送所必需的。
    permissions:
      contents: write # 授予对仓库内容的写入权限

    # 指定作业运行的环境，这里使用最新的 Ubuntu Linux
    runs-on: ubuntu-latest

    # 定义作业中的步骤
    steps:
      # 步骤 1: 检出仓库代码
      # uses: actions/checkout@v4 是一个官方 Action，用于将你的仓库代码克隆到 Runner 上
      - name: 检出仓库
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      # 步骤 2: 拉取最新更改
      # 确保本地仓库是最新的，以避免后续推送时的冲突
      - name: 拉取最新更改
        run: |
          git pull origin main

      # 新增调试步骤：打印初始 tracker.json 内容
      # 这一步将在 Python 脚本运行前，显示仓库中当前 tracker.json 的内容
      - name: 打印初始 tracker.json 内容
        run: |
          echo "--- 仓库中当前的 tracker.json 内容 ---"
          if [ -f tracker.json ]; then
            cat tracker.json
          else
            echo "tracker.json 文件不存在于仓库中。"
          fi
          echo "-------------------------------------"

      # 步骤 3: 设置 Python 环境
      - name: 设置 Python 环境
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      # 步骤 4: 安装 Python 依赖
      - name: 安装 Python 依赖
        run: |
          python -m pip install --upgrade pip
          pip install requests

      # 步骤 5: 运行 Python 脚本
      # 假设你的 Python 脚本位于 scripts/data_processor.py
      # 并且它会将处理后的 JSON 文件保存到 tracker.json (根目录)
      - name: 运行 Python 数据处理器
        run: |
          python scripts/data_processor.py

      # 步骤 6: 打印 tracker.json 内容 (脚本生成后的内容)
      # 这一步将 tracker.json 的内容输出到工作流日志中，方便调试和查看
      - name: 打印脚本生成后的 tracker.json 内容
        run: |
          echo "--- 脚本生成后的 tracker.json 内容 ---"
          cat tracker.json
          echo "-------------------------------------"

      # 步骤 7: 配置 Git 用户信息
      - name: 配置 Git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      # 步骤 8: 提交并推送更改 (更健壮的逻辑)
      - name: 提交并推送更改
        run: |
          # 1. 将 tracker.json 添加到暂存区
          git add tracker.json
          
          # 2. 检查暂存区中的 tracker.json 是否与上次提交有实际变化。
          # 使用 --cached 参数来比较暂存区与 HEAD。
          if git diff --cached --quiet --exit-code tracker.json; then
            echo "tracker.json 没有变化，跳过提交和推送。"
            # 调试：如果 Git 认为没有变化，打印详细的暂存区与 HEAD 的 diff
            echo "--- 详细 Git Diff (暂存区 vs HEAD) 输出 (如果 Git 认为没有变化) ---"
            git diff --cached tracker.json # 打印详细差异，不带 --quiet --exit-code
            echo "-------------------------------------------------------------------"
          else
            echo "tracker.json 已变化，准备提交..."
            git commit -m "Python脚本自动数据更新"
            
            # 3. 尝试直接推送
            if ! git push; then
              echo "首次推送失败，尝试拉取最新更改并 rebase..."
              # 获取远程最新更改，但不合并到本地分支
              git fetch origin main
              # 将本地的 commit rebase 到远程的 main 分支之上
              git rebase origin/main
              echo "Rebase 完成，再次尝试推送..."
              # 再次尝试推送
              git push
            fi
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
